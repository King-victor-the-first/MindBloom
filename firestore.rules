rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is a moderator or super admin
    function isModerator(userId) {
      return exists(/databases/$(database)/documents/userProfiles/$(userId)) &&
             get(/databases/$(database)/documents/userProfiles/$(userId)).data.isModerator == true;
    }

    // Rules for userProfiles collection
    match /userProfiles/{userId} {
      // A user can read their own profile, or if they are a moderator.
      allow get: if request.auth.uid == userId || isModerator(request.auth.uid);
      
      // Any authenticated user can create their own profile (for sign-up).
      allow create: if request.auth.uid == userId;

      // A user can update their own profile. Moderators can also update profiles.
      allow update: if request.auth.uid == userId || isModerator(request.auth.uid);
      
      // Only moderators can delete users (except for other moderators).
      allow delete: if isModerator(request.auth.uid) && !resource.data.isModerator;
    }

    // Rules for all subcollections of userProfiles
    match /userProfiles/{userId}/{subcollection}/{docId} {
      // Only the owning user can access their own subcollection documents.
      // This covers moodEntries, gratitudeJournal, and safetyPlan.
      allow read, write: if request.auth.uid == userId;
    }
    
    // Rules for the groupChatMessages collection
    match /groupChatMessages/{messageId} {
      // Any authenticated user can read chat messages.
      allow list, get: if request.auth != null;
      
      // Any authenticated user can create a message.
      allow create: if request.auth != null;
      
      // A user can "delete" (soft delete by updating) their own message.
      // A moderator can delete any message.
      allow update: if (request.auth.uid == resource.data.userId) || isModerator(request.auth.uid);
    }
  }
}
