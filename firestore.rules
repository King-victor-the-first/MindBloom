/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user ownership and authenticated access. It avoids complex data validation
 * to enable rapid prototyping. All data is secured by default, and specific exceptions are made for
 * public read access where appropriate.
 *
 * Data Structure:
 * - `/userProfiles/{userId}`: Stores public user profile information, accessible only to the owning user.
 * - `/userProfiles/{userId}/moodEntries/{entryId}`: Stores mood entries, accessible only to the owning user.
 * - `/groupChatMessages/{messageId}`: Stores chat messages, publicly readable but writable only by authenticated users.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Public listing of user profiles and mood entries is disallowed.
 * - Group chat messages are publicly readable to facilitate anonymous communication.
 *
 * Denormalization for Authorization:
 *  -The `ChatMessage` objects store the `userId` of the message author. This allows `isOwner(userId)` checks on the `/groupChatMessages/{messageId}` collection.
 *
 * Structural Segregation:
 *  - Mood entries are stored in a subcollection of `userProfiles` to enforce user-specific data isolation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the resource's userId.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) - Allow user to create their own profile.
     * @allow (get) - Allow user to get their own profile.
     * @allow (update) - Allow user to update their own profile.
     * @allow (delete) - Allow user to delete their own profile.
     * @deny (create) - Deny creation if the user ID in the path does not match the authenticated user's ID.
     * @deny (get) - Deny retrieval if the user ID in the path does not match the authenticated user's ID.
     * @deny (update) - Deny update if the user ID in the path does not match the authenticated user's ID.
     * @deny (delete) - Deny delete if the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for mood entries.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (create) - Allow user to create mood entries under their own profile.
     * @allow (get) - Allow user to get mood entries under their own profile.
     * @allow (update) - Allow user to update mood entries under their own profile.
     * @allow (delete) - Allow user to delete mood entries under their own profile.
     * @deny (create) - Deny creation if the user ID in the parent path does not match the authenticated user's ID.
     * @deny (get) - Deny retrieval if the user ID in the parent path does not match the authenticated user's ID.
     * @deny (update) - Deny update if the user ID in the parent path does not match the authenticated user's ID.
     * @deny (delete) - Deny delete if the user ID in the parent path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (create) - Allow any authenticated user to create a chat message.
     * @allow (get) - Allow anyone to read a chat message.
     * @allow (list) - Allow anyone to list chat messages.
     * @allow (update) - Deny updates to existing messages.
     * @allow (delete) - Deny deletes to existing messages.
     * @deny (create) - Deny creation if the user is not authenticated.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /groupChatMessages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}