/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and mood entries,
 * ensuring that only the authenticated user can read and write their own data.
 * The group chat messages are publicly readable but restricted to authenticated users for writing.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public profile information for each user.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores mood entries for a specific user.
 * - /groupChatMessages/{messageId}: Stores chat messages for the global group chat.
 *
 * Key Security Decisions:
 * - User profiles and mood entries are strictly controlled by user ownership.
 * - The group chat allows any authenticated user to post messages, without moderation enforced via rules.
 * - Data shape is not strictly validated, allowing for flexible prototyping.
 *
 * Denormalization for Authorization:
 * - The `ChatMessage` schema includes `userId` to allow rules to quickly identify the message author.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read or write their own profile.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete) - Authenticated user accessing their own profile (e.g., request.auth.uid == 'user123' accessing /userProfiles/user123).
     * @deny (get, create, update, delete) - Any other user attempting to access another user's profile (e.g., request.auth.uid == 'user456' attempting to access /userProfiles/user123).
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the document and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mood entries for a specific user. Only the authenticated user can read or write their own mood entries.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get, create, update, delete) - Authenticated user accessing their own mood entries (e.g., request.auth.uid == 'user123' accessing /userProfiles/user123/moodEntries/entry1).
     * @deny (get, create, update, delete) - Any other user attempting to access another user's mood entries (e.g., request.auth.uid == 'user456' attempting to access /userProfiles/user123/moodEntries/entry1).
     * @principle Restricts access to a user's own data tree, enforcing ownership.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the document and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to group chat messages. Any authenticated user can read all messages and create new messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list) - Any user can read messages.
     * @allow (create) - Any authenticated user can create messages. The `userId` field must match the authenticated user's ID.
     * @deny (create) - Unauthenticated users cannot create messages.
     * @deny (update, delete) - Only the author or a moderator should be able to edit or delete. Currently, only authenticated users are allowed.
     * @principle Allows public read access but restricts write access to authenticated users, enforcing document ownership.
     */
    match /groupChatMessages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isMessageAuthor(userId) {
        return request.auth.uid == userId
      }

      function isExistingMessageAuthor(userId) {
          return isMessageAuthor(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingMessageAuthor(resource.data.userId) ;
      allow delete: if isExistingMessageAuthor(resource.data.userId);
    }
  }
}