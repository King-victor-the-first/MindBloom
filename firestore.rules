/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes user data protection through strict ownership and access control.
 * Data is organized under user-specific paths (`/userProfiles/{userId}`). Only authenticated users can access their own data.
 * The ruleset is designed to be adaptable for prototyping, focusing on authorization and relational integrity, rather than complete schema validation.
 * @data_structure User profiles are stored in `/userProfiles/{userId}`.
 * @key_security_decisions
 *  - Users can only create, read, update, and delete their own profiles. Listing all user profiles is disallowed.
 *  - Authorization relies exclusively on the authenticated user's UID (`request.auth.uid`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the authenticated user can manage their profile.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'user123' creates their profile at /userProfiles/user123.
     * @allow (get) User with UID 'user123' reads their profile at /userProfiles/user123.
     * @allow (update) User with UID 'user123' updates their profile at /userProfiles/user123.
     * @allow (delete) User with UID 'user123' deletes their profile at /userProfiles/user123.
     * @deny (create) User with UID 'user456' attempts to create a profile at /userProfiles/user123.
     * @deny (get) User with UID 'user456' attempts to read profile at /userProfiles/user123.
     * @deny (update) User with UID 'user456' attempts to update profile at /userProfiles/user123.
     * @deny (delete) User with UID 'user456' attempts to delete profile at /userProfiles/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Deny all access to groupChatMessages collection.
     * @path /groupChatMessages
     * @allow None
     * @deny All
     * @principle This collection is not intended to be accessed by clients according to the documentation provided.
     */
    match /groupChatMessages {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}