/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership and secure access patterns while remaining flexible on data schemas during prototyping.
 * It enforces that only the authenticated user can create, read, update, and delete their own data, with the exception of public read-only collections.
 *
 * Data Structure:
 * - User profile data is stored under /userProfiles/{userId}.
 * - Mood entries are stored under /userProfiles/{userId}/moodEntries/{moodEntryId}.
 *
 * Key Security Decisions:
 * - Users can only access their own user profiles and mood entries.
 * - Listing mood entries is restricted to the owner of the user profile.
 * - Data schema validation is relaxed to allow rapid prototyping.
 *
 * Denormalization for Authorization:
 * - User profile documents and mood entries are linked to the user's UID via the document ID and path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to manage their own profile.
     * @path /userProfiles/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @deny (create) User attempts to create a profile with a different UID.
     * @allow (get) Any authenticated user can read a user profile.
     * @deny (get) Unauthenticated user cannot read a user profile.
     * @allow (update) User with matching UID can update their profile.
     * @deny (update) User attempts to update a profile with a different UID.
     * @allow (delete) User with matching UID can delete their profile.
     * @deny (delete) User attempts to delete a profile with a different UID.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /userProfiles/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn();
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows a user to manage their own mood entries.
     * @path /userProfiles/{userId}/moodEntries/{moodEntryId}
     * @allow (create) User with matching UID can create mood entries.
     * @deny (create) User attempts to create mood entries with a different UID.
     * @allow (get) User with matching UID can read their own mood entries.
     * @deny (get) User attempts to read mood entries of a different UID.
     * @allow (update) User with matching UID can update their own mood entries.
     * @deny (update) User attempts to update mood entries of a different UID.
     * @allow (delete) User with matching UID can delete their own mood entries.
     * @deny (delete) User attempts to delete mood entries of a different UID.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId}/moodEntries/{moodEntryId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}