/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and mood entries.
 *   It also allows public read access to group chat messages while restricting creation to authenticated users.
 *
 * @data_structure
 *   - /userProfiles/{userId}: Stores public user profile information, accessible only to the user.
 *   - /userProfiles/{userId}/moodEntries/{entryId}: Stores mood entries for a specific user, accessible only to the user.
 *   - /groupChatMessages/{messageId}: Stores chat messages, publicly readable, but creation is restricted to authenticated users.
 *
 * @key_security_decisions
 *   - Users can only read and write their own profile data and mood entries.
 *   - Group chat messages are publicly readable, but only authenticated users can create them.
 *   - Listing user profiles is disallowed.
 *   - No validation is performed on data types or required fields other than those critical for authorization.
 *
 * @denormalization_for_authorization
 *   - The `userId` is duplicated in the path and within the `userProfile` document itself to ensure path consistency and ownership.
 *
 * @structural_segregation
 *   - User profiles and mood entries are stored in a private user subcollection to ensure data privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "firstName": "John", "lastName": "Doe", "email": "john@example.com", "id": "user123" } } }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   Request: { "auth": { "uid": "user456" }, "resource": { "data": { "firstName": "John", "lastName": "Doe", "email": "john@example.com", "id": "user123" } } }
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, and delete the profile of 'user123'.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for user profile management.
     */
    match /userProfiles/{userId} {
      // Allow anyone to read a user profile
      allow get: if true;

      // Prevent listing of all user profiles
      allow list: if false;

      // Allow a user to create their own profile if the userId matches
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;

      // Allow the user to update and delete their own profile
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mood entries for a specific user.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (create) User with ID 'user123' can create a mood entry under their profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "mood": "Good", "value": 4, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own mood entries.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create a mood entry under the profile of 'user123'.
     *   Request: { "auth": { "uid": "user456" }, "resource": { "data": { "mood": "Good", "value": 4, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, and delete the mood entries of 'user123'.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Restricts access to mood entries to the owning user.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      // Allow the owner to read and list their own mood entries
      allow get, list: if isOwner(userId);

      // Allow the owner to create mood entries
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the owner to update and delete their own mood entries
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list) Any user can read group chat messages.
     *   Request: { "auth": { "uid": "anyUser" } }
     * @allow (create) Any authenticated user can create a group chat message.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "userName": "Test User", "message": "Hello!", "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (create) An unauthenticated user cannot create a group chat message.
     *   Request: { "auth": null, "resource": { "data": { "userId": "user123", "userName": "Test User", "message": "Hello!", "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (update, delete) No one can update or delete a chat message (data immutability).
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Allows public read access to group chat messages, but restricts creation to authenticated users.
     */
    match /groupChatMessages/{messageId} {
      // Allow anyone to read and list chat messages
      allow get, list: if true;

      // Allow any authenticated user to create a chat message
      allow create: if isSignedIn();

      // No one can update or delete a chat message
      allow update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner and the resource exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}