/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user identity and role.
 * Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public profile information for each user.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores individual mood entries for each user.
 * - /groupChatMessages/{messageId}: Stores messages in a public group chat.
 *
 * Key Security Decisions:
 * - User profiles and mood entries are strictly user-owned.
 * - Group chat messages can be modified if user is owner or a moderator.
 * - Data validation is minimal during prototyping to allow for flexible schemas.
 *
 * Denormalization for Authorization:
 *  - The `ChatMessage` includes `userId` and `isModerator` to avoid needing to perform additional lookups for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read and write.
     * @path /userProfiles/{userId}
     * @allow (get, update, delete) User with ID 'user123' can access their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (get, update, delete) User with ID 'user456' cannot access 'user123' profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure mood entries. Only the owner (user) can read and write.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (create, get, update, delete) User with ID 'user123' can manage their own mood entries.
     * @deny (create, get, update, delete) User with ID 'user456' cannot manage 'user123' mood entries.
     * @principle Enforces user-ownership for mood entry data within their profile.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure group chat messages. Anyone can read. Only the owner or moderator can write.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list) Any user can read chat messages.
     * @allow (create) Authenticated user can create a chat message.
     * @allow (update, delete) Owner or moderator can update/delete the message.
     * @deny (update, delete) Regular user cannot update/delete other user's messages.
     * @principle Allows public read access but restricts write access to owners and moderators.
     */
    match /groupChatMessages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.userId) || (isSignedIn() && resource.data.isModerator == true);
      allow delete: if isOwner(resource.data.userId) || (isSignedIn() && resource.data.isModerator == true);
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the resource and that the resource exists.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}