
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user data exists
    function userExists(userId) {
        return exists(/databases/$(database)/documents/userProfiles/$(userId));
    }
    
    // Helper function to get user data
    function getUserData(userId) {
        return get(/databases/$(database)/documents/userProfiles/$(userId)).data;
    }

    // Helper function to check if a user is a moderator
    function isModerator(userId) {
      return userExists(userId) && getUserData(userId).isModerator == true;
    }

    // Rules for the userProfiles collection
    match /userProfiles/{userId} {
      // Any authenticated user can create their own profile
      allow create: if isOwner(userId);
      // A user can read their own profile, or a moderator can read any profile
      allow get: if isOwner(userId) || isModerator(request.auth.uid);
      // A user can update their own profile
      allow update: if isOwner(userId);
      // Only moderators can list all users
      allow list: if isModerator(request.auth.uid);
      // Deleting a user profile is restricted (only by moderators in-app logic)
      allow delete: if isModerator(request.auth.uid);

      // Rules for user-specific subcollections
      
      // Mood Entries
      match /moodEntries/{entryId} {
        // A user can create, read, update, and delete their own mood entries
        allow read, write: if isOwner(userId);
      }

      // Gratitude Journal
      match /gratitudeJournal/{journalId} {
        // A user can create, read, update, and delete their own gratitude entries
        allow read, write: if isOwner(userId);
      }

      // Safety Plan
      match /safetyPlan/{planId} {
         // A user can create, read, update, and delete their own safety plan
        allow read, write: if isOwner(userId);
      }
    }

    // Rules for the groupChatMessages collection
    match /groupChatMessages/{messageId} {
      // Any authenticated user can read all messages
      allow list, get: if isAuthenticated();

      // Any authenticated user can create a message
      // The incoming message's userId must match their own uid
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // A user can update (soft-delete) their own message, or a moderator can update any message
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isModerator(request.auth.uid));
      
      // Deletes are disallowed to enforce soft-deletion through updates
      allow delete: if false;
    }
  }
}
