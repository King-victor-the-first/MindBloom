/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user ownership and explicit permissions. It avoids overly permissive "if true" conditions for write operations.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Public user profiles, readable by all, but writable only by the owning user.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Private mood entries, accessible only to the owning user.
 * - /groupChatMessages/{messageId}: Public chat messages, creatable by any signed-in user, but not updatable or deletable.
 *
 * Key Security Decisions:
 * - User profiles are readable by everyone but only editable by the owner.
 * - Mood entries are strictly private and accessible only to the owning user.
 * - The group chat is public for reading and posting, but messages cannot be modified or deleted.
 * - Listing of user profiles is disallowed due to privacy concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get) Any user can read any profile.
     * @allow (create) A user can create their own profile.
     * @allow (update) A user can update their own profile.
     * @allow (delete) A user can delete their own profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (update) A user cannot update another user's profile.
     * @deny (delete) A user cannot delete another user's profile.
     * @principle Enforces user ownership and allows public reads.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false; // Disallowing listing for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mood entries for a specific user.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get) The owner can get their mood entries.
     * @allow (list) The owner can list their mood entries.
     * @allow (create) The owner can create new mood entries.
     * @allow (update) The owner can update their mood entries.
     * @allow (delete) The owner can delete their mood entries.
     * @deny (get) Another user cannot get mood entries.
     * @deny (list) Another user cannot list mood entries.
     * @deny (create) Another user cannot create mood entries.
     * @deny (update) Another user cannot update mood entries.
     * @deny (delete) Another user cannot delete mood entries.
     * @principle Enforces strict user ownership for private data.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get) Any user can read messages.
     * @allow (list) Any user can read messages.
     * @allow (create) Any signed-in user can create a message.
     * @deny (update) No user can update a message.
     * @deny (delete) No user can delete a message.
     * @principle Allows public read access with restricted write access.
     */
    match /groupChatMessages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}