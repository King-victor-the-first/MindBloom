/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode. It prioritizes developer velocity and rapid iteration.
 * Therefore, it enforces authentication and authorization checks but skips schema validation.
 * The goal is to prevent unauthorized access while allowing data shapes to evolve quickly.
 *
 * Data Structure:
 * The database contains user profiles stored under `/userProfiles/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - List operations on `/userProfiles` are disallowed to prevent user enumeration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read or write their own profile.
     * @path /userProfiles/{userId}
     * @allow (create, update, delete, get) - Authenticated user with matching UID.
     * @deny (create, update, delete, get) - Any unauthenticated request.
     * @deny (create, update, delete, get) - Authenticated user with a non-matching UID.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Explicitly disallow listing user profiles.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Access to groupChatMessages collection is denied for all users
     * @path /groupChatMessages
     * @allow None
     * @deny All requests
     */
    match /groupChatMessages/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID.
     * @param {string} userId - The user ID to check.
     * @return True if the user ID matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId - The user ID to check.
     * @return True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}