/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and mood entries,
 *              while allowing public read access to group chat messages.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public profile information for each user, accessible only by the user.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores mood entries for each user, accessible only by the user.
 * - /groupChatMessages/{messageId}: Stores chat messages accessible to all users (public read).
 *
 * Key Security Decisions:
 * - User profiles and mood entries are private and only accessible to the owning user.
 * - Group chat messages are publicly readable.
 * - Users cannot list all user profiles.
 *
 * Denormalization for Authorization:
 * - The userId is used in the document path for /userProfiles/{userId} and /userProfiles/{userId}/moodEntries/{entryId}
 *   to enforce ownership without needing to store it in the document itself.
 *
 * Structural Segregation:
 * - Private user data (profiles, mood entries) is stored under /userProfiles/{userId} to ensure clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete): Authenticated user can access their own profile.
     * @deny (get, create, update, delete): Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Prevent listing all user profiles.
      allow list: if false;

      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to update their own profile if they are the owner.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile if they are the owner.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mood entries for a specific user.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get, create, update, delete): Authenticated user can access their own mood entries.
     * @deny (get, create, update, delete): Authenticated user cannot access another user's mood entries.
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
       // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }
      
      // Allow a user to read their own mood entries.
      allow get: if isOwner(userId);

      // Allow a user to list their own mood entries.
      allow list: if isOwner(userId);

      // Allow a user to create mood entries under their own profile.
      allow create: if isOwner(userId);

      // Allow a user to update their own mood entries.
      allow update: if isExistingOwner(userId);

      // Allow a user to delete their own mood entries.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list): All users can read chat messages.
     * @allow (create): All authenticated users can create chat messages.
     * @deny (update, delete): Only moderators should be able to edit or remove messages (TODO).
     * @principle Allows public read access to chat messages while restricting modification.
     */
    match /groupChatMessages/{messageId} {
      // Allow anyone to read chat messages.
      allow get, list: if true;

      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow any signed-in user to create a chat message.
      allow create: if isSignedIn();

      // TODO: Implement moderator-only update/delete. For now, deny all updates and deletes.
      allow update, delete: if false;
    }
  }
}