/**
 * @fileoverview Firestore Security Rules for the Mood Tracker application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and mood entries.
 * All users can read the public user profiles, but only the authenticated user can create, update, or delete their profile and associated mood entries.
 * The group chat messages are publicly accessible for reading but restricted to authenticated users for creation.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public user profile information, with the document ID matching the user's Firebase Auth UID.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores individual mood entries for each user, nested under their profile.
 * - /groupChatMessages/{messageId}: Stores messages for the anonymous peer-to-peer group chat.
 *
 * Key Security Decisions:
 * - Public read access to user profiles to allow listing users.
 * - User profiles are created upon signup, and only the creating user can modify or delete them.
 * - Mood entries are private and only accessible to the user who created them.
 * - Group chat messages are publicly readable but restricted to authenticated users for posting.
 * - No user listing is explicitly disallowed as user profiles are public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get, list): Any user can read a user profile.
     * @allow (create): Authenticated user can create their own profile, and the document id must match their UID.
     * @allow (update, delete): Authenticated user can update/delete their own profile.
     * @deny (create): If the user tries to create a profile with an ID that does not match their own UID.
     * @deny (update, delete): If the user tries to update or delete a profile that is not theirs or that does not exist.
     * @principle Enforces document ownership and allows public read access to user profiles.
     */
    match /userProfiles/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mood entry documents nested under a user profile.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get, list): Authenticated user can read their own mood entries.
     * @allow (create): Authenticated user can create mood entries under their own profile.
     * @allow (update, delete): Authenticated user can update/delete their own mood entries, provided they exist.
     * @deny (create): If the user tries to create a mood entry under a profile that is not theirs.
     * @deny (update, delete): If the user tries to update or delete a mood entry that is not theirs or that does not exist.
     * @principle Enforces document ownership for mood entries within user profiles.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list): Any user can read group chat messages.
     * @allow (create): Authenticated user can create a group chat message.
     * @deny (update, delete): No user can update or delete a group chat message.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /groupChatMessages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}