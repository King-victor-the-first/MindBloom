rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of the data
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if the user is a moderator
    function isModerator() {
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.isModerator == true;
    }
    
    // Helper function to check if the user is a super admin
    function isSuperAdmin() {
        return request.auth != null && request.auth.uid == 'BzsBHchaPEYuHwuhqlMiwRaMbBJ2';
    }

    // Rules for the userProfiles collection
    match /userProfiles/{userId} {
      // A user can create their own profile.
      allow create: if isOwner(userId);
      
      // A user can read or update their own profile.
      // Super admins can read any user's profile.
      allow get, update: if isOwner(userId) || isSuperAdmin();

      // Only super admins can list all users.
      allow list: if isSuperAdmin();
      
      // A user cannot delete their profile through the app, but a super admin can.
      allow delete: if isSuperAdmin();

      // Rules for the moodEntries subcollection
      match /moodEntries/{entryId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for the gratitudeJournal subcollection
      match /gratitudeJournal/{journalId} {
        allow read, write: if isOwner(userId);
      }
      
      // Rules for the safetyPlan subcollection
      match /safetyPlan/{planId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Rules for the groupChatMessages collection
    match /groupChatMessages/{messageId} {
      // Any authenticated user can read and create messages.
      allow read, create: if request.auth != null;

      // Users can only update/delete their own messages.
      // Moderators can update/delete any message.
      allow update, delete: if (request.auth != null && resource.data.userId == request.auth.uid) || isModerator();
    }
  }
}
