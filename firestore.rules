/**
 * @fileoverview Firestore Security Rules for Mood Tracker App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and mood entries,
 * while allowing public read access to group chat messages.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public profile information, accessible only by the user.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores mood entries, accessible only by the user.
 * - /groupChatMessages/{messageId}: Stores public chat messages.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and mood entries.
 * - Anyone can read group chat messages, but writing is restricted to authenticated users.
 * - Listing of user profiles is denied to prevent information harvesting.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with a mismatched user ID.
     * @deny (get, update, delete) - User attempts to access another user's profile.
     * @deny (list) - Listing user profiles is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to mood entries for a specific user.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (create) - Authenticated user creates a mood entry under their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own mood entries.
     * @deny (create) - User attempts to create a mood entry under another user's profile.
     * @deny (get, update, delete) - User attempts to access another user's mood entries.
     * @deny (list) - User attempts to list mood entries of another user.
     * @principle Enforces document ownership for mood entries.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list) - Anyone can read group chat messages.
     * @allow (create) - Authenticated users can create group chat messages.
     * @deny (update, delete) - No one can update or delete group chat messages.
     * @principle Allows public read access to group chat messages, restricts writes to authenticated users.
     */
    match /groupChatMessages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}