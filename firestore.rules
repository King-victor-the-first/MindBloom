
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is a moderator
    function isModerator() {
      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.isModerator == true;
    }

    // Rules for user profiles
    match /userProfiles/{userId} {
      // Users can read and write to their own profile.
      // Moderators can read, write, and delete any user's profile.
      allow read, write: if isAuthenticated() && (isOwner(userId) || isModerator());
      allow delete: if isAuthenticated() && isModerator();
    }

    // Rules for user-specific mood entries
    match /userProfiles/{userId}/moodEntries/{entryId} {
      // Users can read and write to their own mood entries.
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Rules for the public group chat
    match /groupChatMessages/{messageId} {
      // Any authenticated user can read the entire collection (list) and get individual messages.
      allow list, get: if isAuthenticated();
      // Any authenticated user can create a new message.
      allow create: if isAuthenticated();
    }
  }
}
