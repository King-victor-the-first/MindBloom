/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and mood entries,
 *              while allowing public read access to group chat messages. Moderator status, managed
 *              in user profiles, grants the ability to moderate the chat.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public user profile data. Only the user and moderators can read or write.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores mood entries for a specific user. Only the user can manage these.
 * - /groupChatMessages/{messageId}: Stores public chat messages. Anyone can read, but only authenticated users can create.
 *
 * Key Security Decisions:
 * - User profiles are private and only editable by the user and moderators, preventing unauthorized modifications.
 * - Mood entries are strictly user-owned, ensuring personal mood data privacy.
 * - Group chat messages are publicly readable to facilitate open communication.
 * - Moderators can be assigned by updating the isModerator field.
 *
 * Denormalization for Authorization:
 * - The `isModerator` flag is stored directly within the user profile to avoid needing separate role lookups for chat moderation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the request is from the owner of the resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is a moderator.
    function isModerator() {
      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.isModerator == true;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId) - Allows the user to read, update, and delete their own profile.
     * @allow (get, update) if isSignedIn() && isModerator() - Allows moderators to read and update user profiles.
     * @allow (create) if isSignedIn() && isOwner(userId) - Allows a user to create their own profile.
     * @deny (create) if !isSignedIn() - Prevents unauthenticated users from creating profiles.
     * @deny (list) - Listing user profiles is not allowed.
     * @principle Enforces document ownership and moderator access for user profiles.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isModerator());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isModerator());
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to mood entries for a specific user.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get, list, create, update, delete) if isSignedIn() && isOwner(userId) - Allows the user to manage their own mood entries.
     * @deny (get, list, create, update, delete) if !isSignedIn() - Prevents unauthenticated users from accessing mood entries.
     * @principle Restricts access to a user's own mood entries.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to group chat messages.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list) if true - Allows anyone to read chat messages.
     * @allow (create) if isSignedIn() - Allows authenticated users to create chat messages.
     * @allow (update, delete) if isSignedIn() && isModerator() - Allows moderators to update and delete chat messages.
     * @deny (update, delete) if !isSignedIn() - Denies unauthenticated users from updating and deleting messages.
     * @principle Allows public read access for chat messages, with write access restricted to authenticated users and moderators.
     */
    match /groupChatMessages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isModerator();
      allow delete: if isSignedIn() && isModerator();
    }
  }
}