/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset employs a hybrid security model. User profiles are publicly readable but only editable by their respective owners.
 * Mood entries are private and accessible only to the user who created them.
 * Group chat messages are publicly readable and writable, but only moderators can delete them.
 *
 * @Data Structure
 * - /userProfiles/{userId}: Stores public user profile data.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores private mood entries for each user.
 * - /groupChatMessages/{messageId}: Stores public chat messages.
 *
 * @Key Security Decisions
 * - User profiles are publicly readable to facilitate discovery and connection within the app.
 * - User listing is explicitly denied to prevent scraping and unauthorized data collection.
 * - Data validation is relaxed during this prototyping phase to allow for rapid iteration.
 * - The `isModerator` field on `ChatMessage` documents is critical for the moderator-only delete rule.
 *
 * @Denormalization for Authorization
 * The `ChatMessage` entity includes an `isModerator` field which is copied from the user's profile to allow moderator-only delete.
 *
 * @Structural Segregation
 * Mood entries are stored in a user-specific subcollection to ensure privacy and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all user profiles, but only allows a user to create their own profile.
     * @path /userProfiles/{userId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == userId
     * @allow (update, delete): if request.auth.uid == userId
     * @deny (create): if request.auth.uid != userId
     * @deny (update, delete): if request.auth.uid != userId
     * @principle Allows anyone to read user profiles, but only the owner can modify them.
     */
    match /userProfiles/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own mood entries.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get, list, create, update, delete): if request.auth.uid == userId
     * @deny (create, update, delete): if request.auth.uid != userId
     * @principle Enforces document ownership: only the user who owns the mood entries can read/write them.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read and create group chat messages, but only moderators can delete them.
     * @path /groupChatMessages/{messageId}
     * @allow (get, list, create): if true
     * @allow (delete): if resource.data.isModerator == true
     * @deny (delete): if resource.data.isModerator == false
     * @principle Allows public read/write access for all users, but restricts deletion to moderators.
     */
    match /groupChatMessages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn() && resource.data.isModerator == true;
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}