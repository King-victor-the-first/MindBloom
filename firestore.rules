/**
 * @fileoverview Firestore Security Rules for the Mood Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model where users own their profile data and mood entries.
 * A global group chat is available for all users.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores public user profile information. Each user document is named after the user's UID.
 * - /userProfiles/{userId}/moodEntries/{entryId}: Stores individual mood entries for each user.
 * - /groupChatMessages/{messageId}: Stores messages for a global, anonymous chat.
 *
 * Key Security Decisions:
 * - User profiles are readable only by the owning user. Listing user profiles is disallowed.
 * - Mood entries are readable and writable only by the owning user.
 * - The group chat is publicly readable, but only authenticated users can send messages.
 * - Data shape validation is relaxed in prototyping mode.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` parameter in the path to `request.auth.uid`.
 *   This avoids the need to read user documents to determine ownership.
 *
 * Structural Segregation:
 * - User profile information and mood entries are stored under the `/userProfiles/{userId}` path,
 *   providing clear ownership and preventing accidental public exposure of private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     *     Request: auth.uid = 'user123'
     * @deny (get) User with UID 'user456' cannot read profile 'user123'.
     *     Request: auth.uid = 'user456'
     * @allow (create) User 'user123' can create their profile.
     *     Request: auth.uid = 'user123', request.resource.data.id = 'user123'
     * @deny (update) User 'user456' cannot update profile 'user123'.
     *     Request: auth.uid = 'user456'
     * @deny (delete) Only the owner can delete a profile.
     *     Request: auth.uid = 'user456'
     * @principle Enforces document ownership for reads and writes.
     */
    match /userProfiles/{userId} {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to mood entries for a specific user.
     * @path /userProfiles/{userId}/moodEntries/{entryId}
     * @allow (get) User with UID 'user123' can read their own mood entries.
     *     Request: auth.uid = 'user123'
     * @deny (get) User with UID 'user456' cannot read mood entries of 'user123'.
     *     Request: auth.uid = 'user456'
     * @allow (create) User 'user123' can create mood entries under their profile.
     *     Request: auth.uid = 'user123'
     * @deny (update) User 'user456' cannot update mood entries of 'user123'.
     *     Request: auth.uid = 'user456'
     * @deny (delete) Only the owner can delete a mood entry.
     *     Request: auth.uid = 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /userProfiles/{userId}/moodEntries/{entryId} {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to messages in the global group chat.
     * @path /groupChatMessages/{messageId}
     * @allow (get) Any user can read messages.
     *     Request: No auth needed
     * @allow (list) Any user can list messages.
     *     Request: No auth needed
     * @allow (create) Authenticated user can create messages.
     *     Request: auth.uid = 'user123'
     * @deny (update) No one can update a message.
     *     Request: auth.uid = 'user123'
     * @deny (delete) No one can delete a message.
     *     Request: auth.uid = 'user123'
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /groupChatMessages/{messageId} {
      // Read rules (Public Read with Authenticated Writes)
      allow get: if true;
      allow list: if true;

      // Write rules
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}